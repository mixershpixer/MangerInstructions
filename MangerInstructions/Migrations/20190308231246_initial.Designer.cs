// <auto-generated />
using System;
using MangerInstructions.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace HowToDo.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20190308231246_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HowToDo.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Index");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, Index = "ArtsAndEntertainment" },
                        new { Id = 2, Index = "Cars" },
                        new { Id = 3, Index = "ComputersAndElectronics" },
                        new { Id = 4, Index = "EducationAndCommunications" },
                        new { Id = 5, Index = "FamilyLife" },
                        new { Id = 6, Index = "FinanceAndBusiness" },
                        new { Id = 7, Index = "FoodAndEntertaining" },
                        new { Id = 8, Index = "Health" },
                        new { Id = 9, Index = "HobbiesAndCrafts" },
                        new { Id = 10, Index = "HolidaysAndTraditions" },
                        new { Id = 11, Index = "HomeAndGarden" },
                        new { Id = 12, Index = "PersonalCareAndStyle" },
                        new { Id = 13, Index = "PetsAndAnimals" },
                        new { Id = 14, Index = "Relationships" },
                        new { Id = 15, Index = "PhilosophyAndReligion" },
                        new { Id = 16, Index = "SportsAndFitness" },
                        new { Id = 17, Index = "Travel" },
                        new { Id = 18, Index = "WorkWorld" },
                        new { Id = 19, Index = "Youth" }
                    );
                });

            modelBuilder.Entity("HowToDo.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InstructionId");

                    b.Property<string>("Text");

                    b.Property<DateTime>("Time");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstructionId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("HowToDo.Models.Instruction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorId");

                    b.Property<string>("CategoryIndex");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Name");

                    b.Property<string>("PersonalPageId");

                    b.Property<string>("ShortDescription");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PersonalPageId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("HowToDo.Models.Like", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("HowToDo.Models.PersonalPage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("PersonalPage");
                });

            modelBuilder.Entity("HowToDo.Models.StepInstruction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageLinks");

                    b.Property<long>("Indexer");

                    b.Property<string>("InstructionId");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("InstructionId");

                    b.ToTable("StepInstruction");
                });

            modelBuilder.Entity("HowToDo.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InstructionId");

                    b.Property<string>("TagName");

                    b.HasKey("Id");

                    b.HasIndex("InstructionId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("HowToDo.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<bool>("IsBlock");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Role")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HowToDo.Models.Vote", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InstructionId");

                    b.Property<int>("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstructionId");

                    b.HasIndex("UserId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("HowToDo.Models.Comment", b =>
                {
                    b.HasOne("HowToDo.Models.Instruction", "Instruction")
                        .WithMany("Comments")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HowToDo.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HowToDo.Models.Instruction", b =>
                {
                    b.HasOne("HowToDo.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("HowToDo.Models.PersonalPage", "PersonalPage")
                        .WithMany("Instructions")
                        .HasForeignKey("PersonalPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HowToDo.Models.Like", b =>
                {
                    b.HasOne("HowToDo.Models.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HowToDo.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HowToDo.Models.PersonalPage", b =>
                {
                    b.HasOne("HowToDo.Models.User", "User")
                        .WithOne("PersonalPage")
                        .HasForeignKey("HowToDo.Models.PersonalPage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HowToDo.Models.StepInstruction", b =>
                {
                    b.HasOne("HowToDo.Models.Instruction", "Instruction")
                        .WithMany("Steps")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HowToDo.Models.Tag", b =>
                {
                    b.HasOne("HowToDo.Models.Instruction", "Instruction")
                        .WithMany("Tags")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HowToDo.Models.Vote", b =>
                {
                    b.HasOne("HowToDo.Models.Instruction", "Instruction")
                        .WithMany("Votes")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HowToDo.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
